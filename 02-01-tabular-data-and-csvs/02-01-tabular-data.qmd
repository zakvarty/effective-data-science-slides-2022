---
title: "Tabular Data"
subtitle: "Data Aquisition and Distribution"
author: Dr Zak Varty
date: ""
editor: source
format:
  revealjs:
    theme: ../eds-slides-theme.scss #(default / dark / simple)
    logo: assets/EDS-logo.jpg
    bibliography: ../refs.bib
    footer: "Effective Data Science: Data - Tabular Data - Zak Varty"
    menu: true
    slide-number: true
    show-slide-number: all # (all / print / speaker)
    self-contained: true # (set to true before publishing html to web)
    chalkboard: false # (conflicts with self-contained)
      #src: drawings.json
      #theme: whiteboard
      #read-only: true
      #buttons: false
    width: 1600 # default is 1050
    height: 900 # default is 850
    incremental: false
---

# 1. Loading Tabular Data

```{r}
#| eval: false
set.seed(1234)
random_data <- data.frame(
  id = letters[1:26],
  gaussian = rnorm(26),
  gamma = rgamma(26, 1, 1),
  uniform = runif(26)
)
readr::write_csv(random_data, file = "./random-data.csv")
readr::write_tsv(random_data, file = "./random-data.tsv")
readr::write_delim(random_data, file = "./random-data.txt")
```

::: {.notes}
:::

## Tabular Data Formats

:::: {.columns}
::: {.column width="50%"}
<br>

Simpler, open source formats improve accessibility and reproducibility.

<br>

-   `tabular-data.csv`

-   `tabular-data.tsv`

-   `tabular-data.txt`
:::
::: {.column width="20%"}
:::
::: {.column width="30%"}
![](./images/xls-is-not-the-only-extension.png)
:::
::::

::: notes
:::

## Reading Tabular Data

  `random-data.csv` contains 26 observations of 4 variables:

  - `id`, a roman letter identifier;
- `gaussian`, standard normal random variates;
- `gamma`, gamma(1,1) random variates;
- `uniform`, uniform(0,1) random variates.

Equivalent data also stored in `random-data.tsv` and `random-data.txt`, using tab and space separation.



## Reading Tabular Data - Base R {.smaller}

<br><br>

```{r}
#| echo: true
#| eval: true
#| output-location: default
random_df <- read.csv(file = 'random-data.csv')
print(random_df)
```

Output is a `data.frame` object. (List of vectors with some nice methods)



## Reading Tabular Data - `{readr}` {.smaller}

<br><br>

```{r}
#| echo: true
#| eval: true
#| output: as-is
#| output-location: default
random_tbl <- readr::read_csv(file = 'random-data.csv')
print(random_tbl)
```

Output is a `tibble` object. (List of vectors with some nicer methods)



## Benefits of `readr::read_csv()`

<br>

1. Increased speed (approx. 10x) and progress bar.

2. Strings are not coerced to factors. No more `stringsAsFactors = FALSE`

3. No row names and nice column names.

4. Reproducibility bonus: does not depend on operating system.



## WTF: Tibbles (Printing)

<br>

- Default to first 10 rows and as many columns as will comfortably fit on your screen.

- Can adjust this behaviour in the print call:

```{r}
#| echo: true
#| eval: false
#| output: asis
# print first three rows and all columns
print(random_tbl, n = 3, width = Inf)
```

<br>

**Bonus:** Colour formatting in IDE and each column tells you it's type.



## WTF: Tibbles (Subsetting)

Subsetting tibbles will always return another tibble.

```{r}
#| echo: true
#| eval: false
# Row Subsetting
random_tbl[1, ] # returns tibble
random_df[1, ]  # returns data.frame

# Column Subsetting
random_tbl[ , 1]      # returns tibble
random_df[ , 1]       # returns vector

# Combined Subsetting
random_tbl[1, 1]      # returns 1x1 tibble
random_df[1, 1]       # returns single value
```

<br>

Avoids edge cases associated with working on data frames.



## Other `{readr}` functions

See `{readr}` documentation, additional arguments for reading messy data.

<br>

**Reading Tabular Data:**

```{r}
#| echo: true
#| eval: false
library(readr)
read_tsv("random-data.tsv")
read_delim("random-data.txt", delim = " ")
```

**Writing Tabular Data:**

```{r}
#| echo: true
#| eval: false
write_csv(random_tbl, "random-data-2.csv")
write_tsv(random_tbl, "random-data-2.tsv")
write_delim(random_tbl, "random-data-2.tsv", delim = " ")
```
::: {.notes}
::: 



## When You Really Need Speed

Some times you have to load _lots of large data sets_, in which case a 10x speedup might not be sufficient.

<br>

If each data set still fits inside RAM, then check out  `data.table::fread()` which is optimised for speed.

<br>

(Alternatives exist for optimal memory usage and data too large for working memory, but not covered here.)


::: {.notes}
Note: While it can be much faster, the resulting data.table object lacks the consistancy properties of a tibble so be sure to check for edge cases, where the returned value is not what you might expect.
:::



<!-- ----------------------------------------------------------------------- -->
# 2. Tidy Data
<!-- ----------------------------------------------------------------------- -->

## Wide vs Tall Data: Example 1 {.smaller}

:::: {.columns}
::: {.column width="45%"}
| **Person ** | **Age ** | **Weight ** | **Height ** |
|-------------|----------|-------------|-------------|
| Bob         | 32       | 168         | 180         |
| Alice       | 24       | 150         | 175         |
| Steve       | 64       | 144         | 165         |
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
| **Person ** | **Variable ** | **Value ** |
|:-----------:|:-------------:|:----------:|
| Bob         | Age           | 32         |
| Bob         | Weight        | 168        |
| Bob         | Height        | 180        |
| Alice       | Age           | 24         |
| Alice       | Weight        | 150        |
| Alice       | Height        | 175        |
| Steve       | Age           | 64         |
| Steve       | Weight        | 144        |
| Steve       | Height        | 165        |
:::
::::

[Source: Wikiedia - Wide and narrow data]

## Wide vs Tall Data: Example 2 {.smaller}

:::: {.columns}
::: {.column width="10%"}
:::
::: {.column width="65%"}
<br><br>

| Team | Points | Assists | Rebounds |
|------|--------|---------|----------|
| A    | 88     | 12      | 22       |
| B    | 91     | 17      | 28       |
| C    | 99     | 24      | 30       |
| D    | 94     | 28      | 31       |

<br><br><br>

[Source: Statology - Long vs wide data]
:::
::: {.column width="25%"}
| Team | Variable | Value |
|------|----------|-------|
| A    | Points   | 88    |
| A    | Assists  | 12    |
| A    | Rebounds | 22    |
| B    | Points   | 91    |
| B    | Assists  | 17    |
| B    | Rebounds | 28    |
| C    | Points   | 99    |
| C    | Assists  | 24    |
| C    | Rebounds | 30    |
| D    | Points   | 94    |
| D    | Assists  | 28    |
| D    | Rebounds | 31    |
:::
::::

:::{.notes}
:::



## Wide vs Tall Data

<br>

:::: {.columns}
::: {.column width="45%"}
### Wide Data

  - First column has unique entries

  - Easier for humans to read and compute on

  - Harder for machines to compute on

:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
### Tall Data

  - First column has repeating entries

  - Harder for humans to read and compute on

  - Easier for machines to compute on

:::
::::

::: {.notes}
:::



## Pivoting Between Wide and Long Formats 

<br>

- Error control at input and analysis is format-dependent. 

- Switching between long and wide formats useful to control errors. 

- Easy with the `{tidyr}` package functions

<br>

```{r}
#| echo: true
#| eval: false
tidyr::pivot_longer()
tidyr::pivot_wider()
```

<br>

(example coming up soon)



## WTF: Tidy Data 

![[Image: R4DS - Chapter 12]](images/tidy-1.png)

::: {.notes}
_Tidy Data_ is an opinionated way to store tabular data. 

- Each column corresponds to a exactly one measured variable
- Each row corresponds to exactly one observational unit 
- Each cell contains exactly one value. 
:::

## WTF: Benefits of Tidy Data 

<br>

- *Consistent data format:* Reduces cognitive load and allows specialised tools (functions) to efficiently work with tabular data. 

<br>

- *Vectorisation*: Keeping variables as columns allows for very efficient data manipulation. 


(this goes back to data frames and tibbles being lists of vectors)

## Example: Tidy Longer 

Consider trying to plot these data as time series. The `year` variable is trapped in the column names!

<br>

```{r}
#| eval: true
#| echo: false
library(magrittr)
countries <- tibble::tibble(
  country = c("Afghanistan", "Brazil", "China"),
  `1999` = c(745, 37737, 212258),
  `2000` = c(2666, 80488, 213766)
)
``` 

```{r}
#| echo: true
countries
```

To tidy this data, we need to `pivot_longer()`. We will turn the column names into a new `year` variable and retaining cell contents as a new variable called `cases`. 

## Example: Tidied Longer

<br>

```{r}
#| echo: true 
#| eval: true
countries %>% 
  tidyr::pivot_longer(cols = c(`1999`,`2000`), names_to = "year", values_to = "cases")
```

Much better! 


## Example Tidy Wider {.smaller}

:::: {.columns}
::: {.column width="50%"}
<br>

There are other times where we might have to widen our data to tidy it. 

<br>

This example is not tidy. Why not? 

::: 
::: {.column width="20%"}
:::
::: {.column width="30%"}
| Team | Variable | Value |
|------|----------|-------|
| A    | Points   | 88    |
| A    | Assists  | 12    |
| A    | Rebounds | 22    |
| B    | Points   | 91    |
| B    | Assists  | 17    |
| B    | Rebounds | 28    |
| C    | Points   | 99    |
| C    | Assists  | 24    |
| C    | Rebounds | 30    |
| D    | Points   | 94    |
| D    | Assists  | 28    |
| D    | Rebounds | 31    |
:::
::::

## Example Tidy Wider {.smaller}

:::: {.columns}
::: {.column width="50%"}
<br>

There are other times where we might have to widen our data to tidy it. 

<br>

This example is not tidy. Why not? 

::: {.incremental}
<br>

_The observational unit here  is a team._ 

_Each variable should be a separate column, with cells containing their values._
:::

::: 
::: {.column width="20%"}
:::
::: {.column width="30%"}
| Team | Variable | Value |
|------|----------|-------|
| A    | Points   | 88    |
| A    | Assists  | 12    |
| A    | Rebounds | 22    |
| B    | Points   | 91    |
| B    | Assists  | 17    |
| B    | Rebounds | 28    |
| C    | Points   | 99    |
| C    | Assists  | 24    |
| C    | Rebounds | 30    |
| D    | Points   | 94    |
| D    | Assists  | 28    |
| D    | Rebounds | 31    |
:::
::::

## Example: Tidied Wider 

<br>
```{r}
tournament <- tibble::tribble(
~Team  , ~Variable , ~Value,
"A"    , "Points"  , 88    ,
"A"    , "Assists" , 12    ,
"A"    , "Rebounds", 22    ,
"B"    , "Points"  , 91    ,
"B"    , "Assists" , 17    ,
"B"    , "Rebounds", 28    ,
"C"    , "Points"  , 99    ,
"C"    , "Assists" , 24    ,
"C"    , "Rebounds", 30    ,
"D"    , "Points"  , 94    ,
"D"    , "Assists" , 28    ,
"D"    , "Rebounds", 31    )
```

```{r}
#| echo: true
#| eval: true
tournament %>% 
  tidyr::pivot_wider(
    id_cols = "Team", 
    names_from = "Variable",
    values_from = "Value")
```

## Other Helpful Functions 
<br>

The `pivot_*()` functions resolve issues with rows (too many observations per row or rows per observation).

<br>

There are similar helper functions to solve column issues: 

 - Multiple variables per column: `tidyr::separate()`,

 - Multiple columns per variable: `tidyr::unite()`. 
 
 
## Missing Values and Tidy Data

In tidy data, every cell contains a value. Including cells with missing values. 

- Missing values are coded as `NA` (generic) or a type-specific `NA`, such as `NA_character_`.

- The `{readr}` family of `read_*()` function have good defaults and helpful `na` argument.  

- Explicitly code `NA` values when collecting data, avoid ambiguity: " ", -999 or worst of all 0.

- More on missing values in EDA videos...  


## Wrapping Up 

<br>

1. Reading in tabular data by a range of methods 

<br>

2. Introduced the `tibble` and tidy data (+ tidy not always best)

<br>

3. Tools for tidying messy tabular data 

